#!/usr/bin/env python
# -*- mode: python -*-
# Usage: pf-admin-api [--method <method>] <resource>
# Invokes PingFederate admin REST API
# Retries on connection refused so can be used right after the service starts (before it is listening).
# Always prints HTTP status and reason to stderr
# If HTTP status is succesful, prints response to --response file or to stderr if unsuccesful.
#
# TODO: Add an idempotent POST which tries a POST and, if the resource already exists,
# does a PUT instead. Use the --response file to find the resource/{id}.
from __future__ import print_function
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import json
from optparse import OptionParser
import time
import sys
import io

adm_user = '<%= @adm_user -%>'
adm_pass = '<%= @adm_pass -%>'
base_URL = '<%= @adm_api_baseURL -%>/'

parser = OptionParser()
parser.add_option('-m','--method',
                  type='string',
                  default='GET',
                  help='HTTP method, one of GET,PUT,POST,PATCH,DELETE [default: %default]')
parser.add_option('-j','--json',
                  type='string',
                  default=None,
                  help='JSON file to POST')
parser.add_option('-r','--response',
                  type='string',
                  default='-',
                  help='write succesful JSON response to file [default: %default]')
parser.add_option('--timeout',
                  type='int',
                  default=10,
                  help='Seconds before timeout [default: %default]')
parser.add_option('--retries',
                  type='int',
                  default=5,
                  help='Number of retries [default: %default]')
parser.add_option('--verify',
                  action="store_true",
                  default=False,
                  help='verify SSL/TLS server certificate [default: %default]')

(opt, arg) = parser.parse_args()

if len(arg) < 1 or opt.method not in ['GET','PUT','POST','PATCH','DELETE']:
  parser.print_usage()
  exit(1)
  
resource = arg[0]
header = {'X-XSRF-Header': '1'}

if opt.json:
  data = json.dumps(json.load(io.open(opt.json,'rb')))
  header.update({'Content-Type': 'application/json'})
else:
  data = None

if not opt.verify:
  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
  
emsg='unknown error'
for n in range(opt.retries):
  try:
    response = requests.request(opt.method,
                                base_URL+resource, 
                                auth=requests.auth.HTTPBasicAuth(adm_user,adm_pass),
                                data=data,
                                headers=header,
                                timeout=opt.timeout,
                                verify=opt.verify)
    print((response.status_code,response.reason),file=sys.stderr)
    resp = json.dumps(json.loads(response.text),indent=2) # pretty-print it
    if response.status_code < 400:
      output = sys.stdout if opt.response == '-' else open(opt.response,'wb')
      print(resp,file=output)
      exit(0)
    else:
      print(resp,file=sys.stderr)
      exit(1)
  except requests.exceptions.ConnectionError as e:
    emsg = e
    time.sleep(opt.timeout)

# only get here if retries is exceeded
print(emsg,file=sys.stderr)
exit(1)

