#!/usr/bin/env python
# -*- mode: python -*-
# Usage: pf-admin-api [--method <method>] <resource>
# Invokes PingFederate admin REST API
# Retries on connection refused so can be used right after the service starts (before it is listening).
# Always prints HTTP status and reason to stderr
# If HTTP status is succesful, prints response to --response file or to stderr if unsuccesful.
#
# TODO: Add an idempotent POST which tries a POST and, if the resource already exists,
# does a PUT instead. Use the --response file to find the resource/{id}.
from __future__ import print_function
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import json
from optparse import OptionParser
import time
import sys
import io

adm_user = '<%= @adm_user -%>'
adm_pass = '<%= @adm_pass -%>'
base_URL = '<%= @adm_api_baseURL -%>/'

def do_req(retries,method,url,**kwargs):
  """
  do_req: invoke requests.request, handling connection retries.
  """
  timeout = kwargs['timeout'] if 'timeout' in kwargs else 10
  for n in range(retries):
    try:
      response = requests.request(method,url,**kwargs)
      return response
    except requests.exceptions.ConnectionError as e:
      emsg = e
      time.sleep(timeout)

  # only get here if retries is exceeded
  response.status_code = '408'
  response.reason = 'Request Timeout'
  response.text = jsons.dumps({'error': 'timed out', 'error_description': 'the API did not respond'})
  return response


parser = OptionParser()
parser.add_option('-m','--method',
                  type='string',
                  default='GET',
                  help='HTTP method, one of GET,PUT,POST,PATCH,DELETE [default: %default]')
parser.add_option('-j','--json',
                  type='string',
                  default=None,
                  help='JSON file to POST')
parser.add_option('-r','--response',
                  type='string',
                  default='-',
                  help='write succesful JSON response to file [default: %default]')
parser.add_option('--timeout',
                  type='int',
                  default=10,
                  help='Seconds before timeout [default: %default]')
parser.add_option('--retries',
                  type='int',
                  default=5,
                  help='Number of retries [default: %default]')
parser.add_option('--verify',
                  action="store_true",
                  default=False,
                  help='verify SSL/TLS server certificate [default: %default]')

(opt, arg) = parser.parse_args()

if len(arg) < 1 or opt.method not in ['GET','PUT','POST','PATCH','DELETE']:
  parser.print_usage()
  exit(1)
  
resource = arg[0]
header = {'X-XSRF-Header': '1'}

if opt.json:
  data = json.load(io.open(opt.json,'rb'))
  dataString = json.dumps(data)
  header.update({'Content-Type': 'application/json'})
else:
  data = dataString = None

if not opt.verify:
  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
  
url = base_URL+resource

# try and make POST idempotent. A prior response file must already exist as that's the source of the 'id'.
# if it exists, add the 'id' to the JSON doc and change the POST to a PUT.
if opt.method == 'POST' and opt.response != '-' and data:
  try:
    rfile = io.open(opt.response,'rb')
  except:
    rfile = None
  resp = json.load(rfile) if rfile else None
  if rfile:
    rfile.close() 

  if resp and 'id' in resp:
    existing = do_req(opt.retries,'GET',
                      url+'/'+resp['id'],
                      auth=requests.auth.HTTPBasicAuth(adm_user,adm_pass),
                      headers=header,
                      timeout=opt.timeout,
                      verify=opt.verify)
    if existing:
      data.update({'id': resp['id']})
      opt.method = 'PUT'
      url = url + '/' + resp['id']
      print('Resource exists. Changing POST to PUT.',file=sys.stderr)

response = do_req(opt.retries,opt.method,
                  url, 
                  auth=requests.auth.HTTPBasicAuth(adm_user,adm_pass),
                  data=dataString,
                  headers=header,
                  timeout=opt.timeout,
                  verify=opt.verify)
print((response.status_code,response.reason),file=sys.stderr)
resp = json.dumps(json.loads(response.text),indent=2) # pretty-print it
if response.status_code < 400:
  output = sys.stdout if opt.response == '-' else open(opt.response,'wb')
  print(resp,file=output)
  exit(0)
else:
  print(resp,file=sys.stderr)
  exit(1)

